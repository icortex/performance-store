<script type='text/javascript'>

    <%= "var products = " %><%= @products ? @products.html_safe : '[]' %><%= ';' %>
    <%= "var dollar= " %><%= Variable.find(2).value %><%= ';' %>

    function local_ready() {

        // Tokenizes inputs at page load when editing
    <% index=0 %>
    <% for lp in @lot.lot_products do %>
    <%= ("autocomplete_product(\"#lot_lot_products_attributes_#{index}\","+
   "\"#{lp.product.brand.brand rescue ''}\","+
   "\"#{lp.product.reference rescue ''}\","+
   "\"#{lp.product.size.name rescue ''}\","+
   "\"#{lp.product.color.name rescue ''}\","+
   "products[#{index}]);").html_safe %>
    <% index+=1 %>
    <% end %>


    }

    /*
     *  fieldset_selector='#sale_sale_products_attributes_'+#
     *  # stands for a number, for example:1 , 2 , 3
     */
    function autocomplete_product(fieldset_selector, brand, reference, size, color, product_options) {
        var cost_input = jq(fieldset_selector + '_cost');
        var cost_cop = jq(fieldset_selector + '_cost_cop');
        var quantity_input = jq(fieldset_selector + '_quantity');
        var utility_input = jq(fieldset_selector + '_utility');
        var subtotal = jq(fieldset_selector + '_sales_cost');
        var price_input = jq(fieldset_selector + '_price');
        var aux=price_input.closest('tr');
        var profit= aux.find('input[name="profit"]');
        var lot_freight=jq('#lot_freight');
        var freight= jq('input[name="freight"]');



        // Row math
        cost_cop.val(cost_input.val()*dollar);
        update_freight();
        subtotal.val(parseInt(cost_cop.val())+parseInt(freight.val()));
        profit.val(subtotal.val()*(utility_input.val()/100));
        price_input.val(aprox(parseInt(subtotal.val())+parseInt(profit.val())));

        lot_freight.bind('keyup change',function(){
            update_freight();
            subtotal.val(parseInt(cost_cop.val())+parseInt(freight.val()));
            profit.val(subtotal.val()*(utility_input.val()/100));
            price_input.val(aprox(parseInt(subtotal.val())+parseInt(profit.val())));
        });

        quantity_input.bind('keyup mouseup',function(){
            update_freight();
            subtotal.val(parseInt(cost_cop.val())+parseInt(freight.val()));
            profit.val(subtotal.val()*(utility_input.val()/100));
            price_input.val(aprox(parseInt(subtotal.val())+parseInt(profit.val())));
        });

        cost_input.keyup(function(){
            cost_cop.val(cost_input.val()*dollar);
            subtotal.val(parseInt(cost_cop.val())+parseInt(freight.val()));
            profit.val(subtotal.val()*(utility_input.val()/100));
            price_input.val(aprox(parseInt(subtotal.val())+parseInt(profit.val())));
        });

        utility_input.bind('keyup change',function(){
            profit.val(subtotal.val()*(utility_input.val()/100));
            price_input.val(aprox(parseInt(subtotal.val())+parseInt(profit.val())));
        });

        // Row math END

        if(lot_freight.val()==''){
            lot_freight.val(0);
        }
        if(utility_input.val()==''){
                    utility_input.val(<%= Variable.find(3).value %>);
                }

        var pre_pop = [];
        if (brand != '' || reference != '') {
            pre_pop = [
                {reference: brand + ', ' + reference,
                    id:reference
                }
            ];
            fill_saved_features(product_options, fieldset_selector, size, color);
        }

        function reset_fields() {
//            price_input.val(0);
//            quantity_input.val(0);
//            max_quantity_label.html('0');
//            subtotal.html('0');
//            size_select.html('');
//            color_select.html('');
//            calculate_total();
        }

        jq(fieldset_selector + '_reference').tokenInput("/articulos.json", {
            crossDomain: false,
            prePopulate: pre_pop,
            search_parameter: "reference",
            searchingText: "Buscando...",
            noResultsText: "No hay resultados",
            hintText: "Ingrese la referencia del articulo...",
            minChars: 3,
            tokenLimit:1,
            onResult: function (results) {
                jq.each(results, function (index, value) {
                    value.reference = value.brand + ', ' + value.reference;
                });
                return results;
            },
            onAdd: function (item) {
                fill_features(item, fieldset_selector);
            },
            onDelete: function() {
                reset_fields();
            }
        });

    }


    function fill_features(item, fieldset_selector) {
        var size_select = jq(fieldset_selector + '_size').html('');
        var color_select = jq(fieldset_selector + '_color').html('');
        var price_input = jq(fieldset_selector + '_price').html('');
        var quantity_input = jq(fieldset_selector + '_quantity').val('0');
        var label_for_selector = 'label[for=' + fieldset_selector.substr(1);

        add_options(size_select['selector'], keys(item.sizes));
        var colors = update_colors(size_select.val(), item, color_select);

        size_select.change(function() {
            colors = update_colors(size_select.val(), item, color_select);
        });
    }

    function fill_saved_features(item, fieldset_selector, size, color) {
        var size_select = jq(fieldset_selector + '_size').html('');
        var color_select = jq(fieldset_selector + '_color').html('');
        var quantity_input = jq(fieldset_selector + '_quantity');
        var label_for_selector = 'label[for=' + fieldset_selector.substr(1);

        add_options(size_select['selector'], keys(item.sizes));
        var colors = update_colors(size_select.val(), item, color_select);
        size_select.val(size);
        color_select.val(color);

        size_select.change(function() {
            colors = update_colors(size_select.val(), item, color_select);
        });

    }

    function keys(some_hash) {
        var ret_array = [];
        for (var key in some_hash) {
            ret_array.push(key);
        }
        return ret_array;
    }

    /*
     * options_array=[['value 1', 'value 2'],['content 1', 'content 2']]
     * OR
     * options_array=['value 1', 'value 2']
     */
    function add_options(select_css_selector_str, options_array) {
        var i, el, select = jq(select_css_selector_str);
        if (!(typeof(options_array[0]) == 'object')) options_array = [options_array,options_array];
        for (i = 0; i < Math.max(options_array[0].length, options_array[1].length); i++) {
            var value = options_array[0][i];
            var content = options_array[1][i];
            var option = jq("<option value=''></option>");
            option.val(value);
            option.html(content);
            select.append(option);
        }
    }
    function update_colors(size_str, item, color_select) {
        var colors = item.sizes[size_str];
        color_select.html('');
        add_options(color_select['selector'], keys(colors));
        return colors;
    }


    function sum_quantities(){
        var quantities=jq('input[id*="quantity"]');

        var sum=0,i=0;
        for(i=0; i<quantities.length ; i++){
            sum+=parseInt(quantities[i].value);
        }
        return sum;
    }

    function update_freight(){
        var lot_freight=jq('#lot_freight');
        var freights= jq('input[name="freight"]');
        for(i=0; i<freights.length ; i++){
            freights[i].value=lot_freight.val()/sum_quantities();
        }
    }

    // aprox by 500
    function aprox(number){
        var mod=number%500;
        var x=500-mod;
        return mod >= 250 ? number+x : number-mod ;
    }


</script>
